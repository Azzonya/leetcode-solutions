/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */

func listToInt(l *ListNode) int {
    str := ""

    curentNode := l
    for curentNode != nil {
        strVal := strconv.Itoa(curentNode.Val)
        str += strVal
        curentNode = curentNode.Next
    }

    result, _ := strconv.Atoi(str)

    return result
}

func NewNode(data int) *ListNode {
    return &ListNode{Val: data, Next: nil}
}

func Append(l *ListNode, data int) {
    newNode := NewNode(data)
    if l == nil {
        l = newNode
        return
    }
    current := l
    for current.Next != nil {
        current = current.Next
    }
    current.Next = newNode
}

func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
    
    dummy := &ListNode{}
	current := dummy
	carry := 0

	for l1 != nil || l2 != nil || carry > 0 {
		sum := carry

		if l1 != nil {
			sum += l1.Val
			l1 = l1.Next
		}

		if l2 != nil {
			sum += l2.Val
			l2 = l2.Next
		}

		carry = sum / 10
		current.Next = &ListNode{Val: sum % 10}
		current = current.Next
	}

	return dummy.Next
}
